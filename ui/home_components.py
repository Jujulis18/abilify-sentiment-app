import streamlit as st
import pandas as pd
from modules.preprocessing.data_filter import filter_data
from .common_components import ( 
    create_info_box,
    create_metric_card, 
    create_section_header,
    display_dataframe_with_info,
    show_warning_message,
    show_success_message,
    create_columns_layout
)

def display_main_header():
    st.markdown(
        '<h1 class="main-header">üè• Dashboard - Analyse des Avis M√©dicaux</h1>', 
        unsafe_allow_html=True
    )

def display_navigation_info():
    create_info_box(
        title="üß≠ Navigation",
        content="""
        Utilisez la barre lat√©rale pour acc√©der aux diff√©rentes analyses :
        
        ‚Ä¢ Sentiment Analysis : Analyse des sentiments des avis patients
        ‚Ä¢ Topic Modeling : D√©couverte des th√®mes principaux (LDA & BERTopic)
        
        """,
        box_type="info"
    )


def display_data_overview(df, ranges):
    """
    Affiche un aper√ßu des donn√©es avec m√©triques principales
    
    Args:
        df: DataFrame des donn√©es
        ranges: Dictionnaire des plages de valeurs
    """
    create_section_header("üìä Aper√ßu des Donn√©es", "Statistiques g√©n√©rales du dataset")
    
    # M√©triques principales en 4 colonnes
    col1, col2, col3, col4 = create_columns_layout([1, 1, 1, 1])
    
    with col1:
        create_metric_card(
            title="Total des Avis",
            value=f"{len(df):,}",
            help_text="Nombre total d'avis dans le dataset"
        )
    
    with col2:
        create_metric_card(
            title="Genres",
            value=len(ranges['genders']),
            help_text="Nombre de genres diff√©rents"
        )
    
    with col3:
        create_metric_card(
            title="Conditions M√©dicales",
            value=len(ranges['conditions']),
            help_text="Nombre de conditions m√©dicales diff√©rentes"
        )
    
    with col4:
        create_metric_card(
            title="Tranche d'√Çge",
            value=f"{ranges['age_min']}-{ranges['age_max']} ans",
            help_text="√âtendue des √¢ges dans le dataset"
        )
    
    # Informations compl√©mentaires
    if 'sentiment' in df.columns:
        st.markdown("### Distribution des Sentiments")
        col1, col2, col3 = create_columns_layout([1, 1, 2])
        
        sentiment_counts = df['sentiment'].value_counts()
        
        with col1:
            if 'Positif' in sentiment_counts:
                create_metric_card(
                    title="Avis Positifs",
                    value=f"{sentiment_counts.get('Positif', 0):,}",
                    help_text="Nombre d'avis avec sentiment positif"
                )
        
        with col2:
            if 'N√©gatif' in sentiment_counts:
                create_metric_card(
                    title="Avis N√©gatifs", 
                    value=f"{sentiment_counts.get('N√©gatif', 0):,}",
                    help_text="Nombre d'avis avec sentiment n√©gatif"
                )

def display_data_filters(df, ranges):
    """
    Affiche les filtres de donn√©es et retourne les donn√©es filtr√©es
    
    Args:
        df: DataFrame des donn√©es originales
        ranges: Dictionnaire des plages de valeurs
    
    Returns:
        DataFrame filtr√© selon les crit√®res s√©lectionn√©s
    """
    create_section_header("üîç Filtres de Donn√©es", "Personnalisez votre analyse")
    
    with st.expander("‚öôÔ∏è Param√®tres de Filtrage", expanded=True):
        col1, col2 = create_columns_layout([1, 1])
        
        with col1:
            st.markdown("**Crit√®res d√©mographiques**")
            
            # Filtre d'√¢ge
            age_range = st.slider(
                "Tranche d'√¢ge",
                min_value=ranges['age_min'],
                max_value=ranges['age_max'],
                value=(ranges['age_min'], ranges['age_max']),
                help="S√©lectionnez la tranche d'√¢ge √† analyser"
            )
            
            # Filtre de genre
            selected_genders = st.multiselect(
                "Genres",
                options=list(ranges['genders']),
                default=list(ranges['genders']),
                help="S√©lectionnez les genres √† inclure dans l'analyse"
            )
        
        with col2:
            st.markdown("**Crit√®res m√©dicaux**")
            
            # Filtre de conditions (limit√© aux 15 plus fr√©quentes pour l'interface)
            condition_counts = df['Condition'].value_counts()
            top_conditions = condition_counts.head(15).index.tolist()
            
            selected_conditions = st.multiselect(
                "Conditions M√©dicales (Top 15)",
                options=top_conditions,
                default=top_conditions[:5],  # S√©lection par d√©faut des 5 premi√®res
                help="S√©lectionnez les conditions m√©dicales √† analyser"
            )
            
            # Option pour inclure toutes les conditions
            include_all_conditions = st.checkbox(
                "Inclure toutes les conditions",
                value=False,
                help="Cochez pour inclure toutes les conditions m√©dicales disponibles"
            )
            
            # Affichage du nombre total de conditions
            st.caption(f"*{len(ranges['conditions'])} conditions disponibles au total*")
    
    # Validation des s√©lections
    if not selected_genders:
        show_warning_message("Veuillez s√©lectionner au moins un genre")
        return df.head(0)
    
    if not selected_conditions and not include_all_conditions:
        show_warning_message("Veuillez s√©lectionner au moins une condition m√©dicale")
        return df.head(0)
    
    # Application des filtres
    conditions_to_use = list(ranges['conditions']) if include_all_conditions else selected_conditions
    
    try:
        filtered_df = filter_data(
            df, 
            age_range=age_range,
            gender_filter=selected_genders,
            condition_filter=conditions_to_use
        )
        
        # Affichage du r√©sultat du filtrage
        if len(filtered_df) > 0:
            show_success_message(
                f"**{len(filtered_df):,}** avis correspondent aux crit√®res s√©lectionn√©s "
                f"({len(filtered_df)/len(df)*100:.1f}% du dataset)"
            )
        else:
            show_warning_message("Aucun avis ne correspond aux crit√®res s√©lectionn√©s")
        
        return filtered_df
        
    except Exception as e:
        st.error(f"Erreur lors du filtrage : {e}")
        return df.head(0)

def display_sample_data(df):
    """
    Affiche un √©chantillon des donn√©es filtr√©es
    
    Args:
        df: DataFrame filtr√© √† afficher
    """
    if df.empty:
        create_info_box(
            title="Aucune donn√©e",
            content="Aucune donn√©e ne correspond aux crit√®res s√©lectionn√©s.",
            box_type="warning"
        )
        return
    
    create_section_header("üìã √âchantillon des Donn√©es", "Aper√ßu des donn√©es s√©lectionn√©es")
    
    # Colonnes √† afficher en priorit√©
    priority_columns = ['Age_numeric', 'Gender', 'Condition', 'description-text']
    available_columns = [col for col in priority_columns if col in df.columns]
    
    if not available_columns:
        show_warning_message("Colonnes d'affichage standard non trouv√©es")
        available_columns = df.columns.tolist()[:4]  # Prendre les 4 premi√®res colonnes
    
    # Affichage de l'√©chantillon
    sample_size = min(10, len(df))
    sample_df = df[available_columns].head(sample_size)
    
    # Troncature du texte pour l'affichage
    if 'description-text' in sample_df.columns:
        sample_df = sample_df.copy()
        sample_df['description-text'] = sample_df['description-text'].apply(
            lambda x: x[:100] + "..." if isinstance(x, str) and len(x) > 100 else x
        )
    
    display_dataframe_with_info(
        sample_df, 
        title=f"√âchantillon ({sample_size} premiers avis)",
        show_shape=True
    )
    
    # Statistiques rapides
    st.markdown("### üìà Statistiques Rapides")
    col1, col2, col3 = create_columns_layout([1, 1, 1])
    
    with col1:
        if 'Age_numeric' in df.columns:
            create_metric_card(
                title="√Çge Moyen",
                value=f"{df['Age_numeric'].mean():.1f} ans" if 'Age_numeric' in df.columns else "N/A"
            )
    
    with col2:
        if 'Gender' in df.columns:
            most_common_gender = df['Gender'].value_counts().index[0]
            create_metric_card(
                title="Genre Principal",
                value=most_common_gender
            )
    
    with col3:
        if 'Condition' in df.columns:
            create_metric_card(
                title="Conditions Uniques",
                value=df['Condition'].nunique()
            )


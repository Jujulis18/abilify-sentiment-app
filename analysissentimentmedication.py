# -*- coding: utf-8 -*-
"""AnalysisSentimentMedication.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G_skh0aVNz8ErfQKMEwNmwtUivuao8so
"""

# NLP Sentiment Analysis - Abilify Reviews

# 📦 Étape 1 : Import des bibliothèques
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud
import nltk
from nltk.corpus import stopwords
from nltk.sentiment import SentimentIntensityAnalyzer
import re
import kagglehub
import kagglehub
import zipfile
import os

# lexique
nltk.download('stopwords')
nltk.download('vader_lexicon')

# 📂 Étape 2 : Chargement des données

# 1. Télécharger le dataset (le fichier ZIP)
csv_file = kagglehub.dataset_download("joyshil0599/abilify-oral-reviews-dataset")
print("ZIP file downloaded at:", csv_file)
print(csv_file)
df = pd.read_csv('/kaggle/input/abilify-oral-reviews-dataset/abilify_ora_effected_peple_reviewl.csv', encoding='latin1', on_bad_lines='skip',  header=0)
df.head()

# 🧹 Étape 3 : Nettoyage du texte
def clean_text(text):
    text = str(text).lower()
    text = re.sub(r"[^a-zA-Z\s]", "", text)
    text = " ".join([word for word in text.split() if word not in stopwords.words("english")])
    return text

# Appliquer sur la colonne des commentaires (description-text)
df['clean_review'] = df['description-text'].apply(clean_text)
df['Gender'] = df['Gender'].apply(clean_text)

# 📊 Étape 4 : WordCloud des mots fréquents
all_words = " ".join(df['clean_review'])
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(all_words)

plt.figure(figsize=(10,5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title("WordCloud des Avis Patients sur Abilify")
plt.show()

# 🔍 Étape 5 : Analyse de sentiment (VADER)
sia = SentimentIntensityAnalyzer()
df['sentiment_score'] = df['clean_review'].apply(lambda x: sia.polarity_scores(x)['compound'])

# Catégorisation simple
def get_sentiment(score):
    if score >= 0.05:
        return "Positif"
    elif score <= -0.05:
        return "Négatif"
    else:
        return "Neutre"

df['sentiment'] = df['sentiment_score'].apply(get_sentiment)
df.head()

# 📈 Étape 6 : Visualisation des sentiments
sns.countplot(data=df, x='sentiment', palette='pastel')
plt.title("Répartition des Sentiments des Patients")
plt.xlabel("Sentiment")
plt.ylabel("Nombre d'avis")
plt.show()

df = df.rename(columns={' Condition': 'Condition'})

# 📈 Étape 7 : Répartition par condition
plt.figure(figsize=(12, 6))
sns.countplot(data=df, y=df['Condition'], order=df['Condition'].value_counts().head(10).index, palette='Set2')
plt.title("Top 10 des Conditions Médicales Déclarées")
plt.xlabel("Nombre d'avis")
plt.ylabel("Condition")
plt.show()

dfNegatif = df[df['sentiment']=='Négatif']
dfNegatif.head()
plt.figure(figsize=(12, 6))
sns.countplot(data=dfNegatif, y=dfNegatif['Condition'], order=dfNegatif['Condition'].value_counts().head(10).index, palette='Set2')
plt.title("Top 10 des Conditions Médicales Déclarées")
plt.xlabel("Nombre d'avis")
plt.ylabel("Condition")
plt.show()

all_words = " ".join(dfNegatif['clean_review'])
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(all_words)

plt.figure(figsize=(10,5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title("WordCloud des Avis Négatifs Patients sur Abilify")
plt.show()

dfPositif = df[df['sentiment']=='Positif']

plt.figure(figsize=(12, 6))
sns.countplot(data=dfPositif, y=dfPositif['Condition'], order=dfPositif['Condition'].value_counts().head(10).index, palette='Set2')
plt.title("Top 10 des Conditions Médicales Déclarées")
plt.xlabel("Nombre d'avis")
plt.ylabel("Condition")
plt.show()

all_words = " ".join(dfPositif['clean_review'])
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(all_words)

plt.figure(figsize=(10,5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title("WordCloud des Avis Patients sur Abilify")
plt.show()

df["Gender"].unique()

df.drop(df[df['Gender'].isin(["patient", "caregiver"])].index, inplace=True)

# 📊 Étape 9 : Analyse selon le genre
plt.figure(figsize=(8, 5))
sns.countplot(data=df, x='Gender', hue='sentiment', palette='Set3')
plt.title("Répartition des Sentiments par Genre")
plt.xlabel("Genre")
plt.ylabel("Nombre d'avis")
plt.legend(title="Sentiment")
plt.show()

df["Age"].value_counts()

df.drop(df[df['Age'].isin(["12-Jul", "Female    ", "6-Mar", "Male    ", "0-2    ", "Patient"])].index, inplace=True)

df["Age"].unique()

plt.figure(figsize=(10,6))
sns.histplot(df['Age'], bins=30, kde=True, color='skyblue')
plt.title("Distribution de l'âge des patients")
plt.xlabel("Âge")
plt.ylabel("Nombre d'avis")
plt.show()

plt.figure(figsize=(10,6))
sns.countplot(data=df, x='Age', hue='sentiment', palette='Set2')
plt.title("Distribution des sentiments par groupe d'âge")
plt.xlabel("Groupe d'âge")
plt.ylabel("Nombre d'avis")
plt.legend(title="Sentiment")
plt.show()

# 🗨️ Étape 11 : Exemples d'avis extrêmes
positifs = df.sort_values('sentiment_score', ascending=False).head(3)[['description-text', 'sentiment_score']]
negatifs = df.sort_values('sentiment_score').head(3)[['description-text', 'sentiment_score']]

print("\nTop 3 Avis les plus Positifs:\n", positifs)
print("\nTop 3 Avis les plus Négatifs:\n", negatifs)

list(df.columns)

# 💾 Étape 12 : Export des données nettoyées
# Pour usage dans Streamlit ou autre visualisation interactive
df[['description-text', 'clean_review', 'sentiment', 'sentiment_score', 'Condition', 'Age', 'Gender']].to_csv("reviews_cleaned.csv", index=False)

# Étape optionnelle : exporter ton notebook en script python (.py)
!jupyter nbconvert --to script "AnalysisSentimentMedication.ipynb"

